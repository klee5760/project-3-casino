{"ast":null,"code":"import _readOnlyError from \"C:\\\\Users\\\\klee5\\\\Desktop\\\\Project 3\\\\casino-royale\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/readOnlyError\";\nimport _toConsumableArray from \"C:\\\\Users\\\\klee5\\\\Desktop\\\\Project 3\\\\casino-royale\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"C:\\\\Users\\\\klee5\\\\Desktop\\\\Project 3\\\\casino-royale\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\klee5\\\\Desktop\\\\Project 3\\\\casino-royale\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\klee5\\\\Desktop\\\\Project 3\\\\casino-royale\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\klee5\\\\Desktop\\\\Project 3\\\\casino-royale\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\klee5\\\\Desktop\\\\Project 3\\\\casino-royale\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\klee5\\\\Desktop\\\\Project 3\\\\casino-royale\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"C:\\\\Users\\\\klee5\\\\Desktop\\\\Project 3\\\\casino-royale\\\\client\\\\src\\\\components\\\\blackjack\\\\game\\\\blackjackgame.js\";\nimport React, { Component } from 'react';\nimport Card from '../card';\nimport Text from '../text';\nimport Button from '../button';\nimport './game.css';\n\nvar Game =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Game, _Component);\n\n  function Game(props) {\n    var _this;\n\n    _classCallCheck(this, Game);\n\n    //Setting up the states\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Game).call(this, props));\n    _this.state = {\n      playerCards: [],\n      dealerCards: [],\n      deck: _toConsumableArray(props.cards || []),\n      playerScore: 0,\n      dealerScore: 0,\n      playerStay: false,\n      playerBust: false,\n      dealerBust: false,\n      winner: null,\n      gameOver: false\n    }; //Setting up the button states\n\n    _this.playerHit = _this.hitPlayer.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.playerStand = _this.playerStand.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.resetGame = _this.resetGame.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.exitGame = _this.exitGame.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(Game, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.startGame();\n    }\n  }, {\n    key: \"resetGame\",\n    value: function resetGame() {\n      this.setState({\n        playerCards: [],\n        dealerCards: [],\n        deck: _toConsumableArray(this.props.cards),\n        playerScore: 0,\n        dealerScore: 0,\n        playerStay: false,\n        playerBust: false,\n        dealerBust: false,\n        winner: null,\n        gameOver: false\n      });\n      this.startGame();\n    } //Go exit to title screen\n\n  }, {\n    key: \"exitGame\",\n    value: function exitGame() {} //Start the game\n\n  }, {\n    key: \"startGame\",\n    value: function startGame() {\n      var deck = this.state.deck;\n      var dealOne = this.dealCard(deck);\n      var dealTwo = this.dealCard(dealOne.cards);\n      var dealThree = this.dealCard(dealTwo.cards);\n      this.setState({\n        playerCards: [dealOne.card, dealThree.card],\n        dealerCards: [dealTwo.card],\n        fullDeck: dealThree.cards,\n        playerScore: this.calculateScore([dealOne.card, dealThree.card]),\n        dealerScore: isNaN(dealTwo.card.value) ? 10 : dealTwo.card.value\n      });\n    } //When the player hits\n\n  }, {\n    key: \"hitPlayer\",\n    value: function hitPlayer() {\n      var _this$state = this.state,\n          deck = _this$state.deck,\n          playerBust = _this$state.playerBust;\n      var deal = this.dealCard(deck);\n      var score = this.calculateScore([].concat(_toConsumableArray(this.state.playerCards), [deal.card])); //When the player does not busts(Player's score is within 21 points)\n\n      if (!playerBust) {\n        this.state({\n          playerCards: [].concat(_toConsumableArray(this.state.playerCards), [deal.card]),\n          fullDeck: deal.cards,\n          playerScore: this.calculateScore([].concat(_toConsumableArray(this.state.playerCards), [deal.card]))\n        });\n      } //Player busts when the player's score is over 21\n\n\n      if (score > 21) {\n        this.setState({\n          playerBust: true,\n          winner: \"Dealer\",\n          gameOver: true\n        });\n      }\n    } //When the player decides to stay\n\n  }, {\n    key: \"playerStand\",\n    value: function playerStand() {\n      var _this2 = this;\n\n      var intervalId = setInterval(function () {\n        var _this2$state = _this2.state,\n            deck = _this2$state.deck,\n            playerScore = _this2$state.playerScore,\n            gameOver = _this2$state.gameOver;\n\n        var deal = _this2.dealCard(deck);\n\n        var score = _this2.calulcateScore([].concat(_toConsumableArray(_this2.state.dealerCards), [deal.card])); //If the round is not over yet\n\n\n        if (!gameOver) {\n          //Dealer draws the card until the dealer's score is at least 17\n          if (score < 17) {\n            _this2.setState({\n              dealerCards: [].concat(_toConsumableArray(_this2.state.dealerCards), [deal.card]),\n              fullDeck: deal.cards,\n              dealerScore: _this2.calculateScore([].concat(_toConsumableArray(_this2.state.dealerCards), [deal.card]))\n            });\n          } //When the dealer busts(dealer's score is over 21)\n          else if (score > 21) {\n              _this2.setState({\n                dealerBust: true,\n                winner: \"Player\",\n                gameOver: true\n              });\n\n              clearInterval(intervalId); //When the dealer's score is higher than the player's within the score of 21\n            } else if (score > playerScore) {\n              _this2.setState({\n                winner: \"Dealer\",\n                gameOver: true\n              });\n\n              clearInterval(intervalId); //When the dealer and the player's score is tie\n            } else if (score = (_readOnlyError(\"score\"), playerScore)) {\n              _this2.setState({\n                winner: \"Tie\",\n                gameOver: true\n              });\n\n              clearInterval(intervalId);\n            }\n        }\n      }, 1000);\n    } //Dealing or drawing the card\n\n  }, {\n    key: \"dealCard\",\n    value: function dealCard(cards) {\n      var randomNumber = Math.floor(Math.random() * cards.length);\n      var card = cards[randomNumber];\n      cards.splice(randomNumber, 1);\n      return {\n        card: card,\n        cards: cards\n      };\n    } //To calculate the score of ace\n\n  }, {\n    key: \"calculateScore\",\n    value: function calculateScore(cards) {\n      var score = cards.value.map(function (card) {\n        return card.value === \"ace\" ? 11 : isNaN(card.value) ? 10 : card.value;\n      }).reduce(function (a, b) {\n        return parseInt(a, 10) + parseInt(b, 10);\n      });\n      var cardValues = cards.map(function (card) {\n        return card.value;\n      });\n\n      if (score > 21 && cardValues.includes(\"ace\")) {\n        score -= 10;\n      }\n\n      return score;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state2 = this.state,\n          playerCards = _this$state2.playerCards,\n          dealerCards = _this$state2.dealerCards,\n          playerScore = _this$state2.playerScore,\n          dealerScore = _this$state2.dealerScore,\n          playerBust = _this$state2.playerBust,\n          dealerBust = _this$state2.dealerBust,\n          winner = _this$state2.winner;\n      return React.createElement(\"div\", {\n        className: \"game-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"dealer-cards-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"score-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200\n        },\n        __self: this\n      }, React.createElement(Text, {\n        type: \"score-text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201\n        },\n        __self: this\n      }, dealerBust ? \"Bust\" : dealerScore)), dealerCards.map(function (card, index) {\n        return React.createElement(\"div\", {\n          className: \"dealer-cards\",\n          key: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 205\n          },\n          __self: this\n        }, React.createElement(Card, {\n          suit: card.suit,\n          value: card.value,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 206\n          },\n          __self: this\n        }));\n      }), winner === \"Dealer\" && React.createElement(\"div\", {\n        className: \"winner\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211\n        },\n        __self: this\n      }, \"WIN\")), React.createElement(\"div\", {\n        className: \"player-cards-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"score-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214\n        },\n        __self: this\n      }, React.createElement(Text, {\n        type: \"score-text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215\n        },\n        __self: this\n      }, playerBust ? \"Bust\" : playerScore)), playerCards.map(function (card, index) {\n        return React.createElement(\"div\", {\n          className: \"player-cards\",\n          key: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 220\n          },\n          __self: this\n        }, React.createElement(Card, {\n          suit: card.suit,\n          value: card.value,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 221\n          },\n          __self: this\n        }));\n      }), winner === \"Player\" && React.createElement(\"div\", {\n        className: \"winner\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226\n        },\n        __self: this\n      }, \"WIN\")), \"//The button for this game\", React.createElement(\"div\", {\n        className: \"button-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 229\n        },\n        __self: this\n      }, React.createElement(Button, {\n        type: \"btn hit-btn\",\n        clickHandler: this.playerHit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 230\n        },\n        __self: this\n      }, \"HIT\"), React.createElement(Button, {\n        type: \"btn stand-btn\",\n        clickHandler: this.playerStand,\n        color: \"tertiary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 233\n        },\n        __self: this\n      }, \"STAND\"), React.createElement(Button, {\n        type: \"btn reset-btn\",\n        clickHandler: this.resetGame,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 240\n        },\n        __self: this\n      }, \"RESET\"), React.createElement(Button, {\n        type: \"btn exit-btn\",\n        clickHandler: this.exitGame,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 243\n        },\n        __self: this\n      }, \"EXIT\")));\n    }\n  }]);\n\n  return Game;\n}(Component);\n\nexport default Game;","map":{"version":3,"sources":["C:\\Users\\klee5\\Desktop\\Project 3\\casino-royale\\client\\src\\components\\blackjack\\game\\blackjackgame.js"],"names":["React","Component","Card","Text","Button","Game","props","state","playerCards","dealerCards","deck","cards","playerScore","dealerScore","playerStay","playerBust","dealerBust","winner","gameOver","playerHit","hitPlayer","bind","playerStand","resetGame","exitGame","startGame","setState","dealOne","dealCard","dealTwo","dealThree","card","fullDeck","calculateScore","isNaN","value","deal","score","intervalId","setInterval","calulcateScore","clearInterval","randomNumber","Math","floor","random","length","splice","map","reduce","a","b","parseInt","cardValues","includes","index","suit"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport Card from '../card';\r\nimport Text from '../text';\r\nimport Button from '../button';\r\nimport './game.css';\r\n\r\nclass Game extends Component {\r\n\r\n  constructor(props) {\r\n\r\n    //Setting up the states\r\n    super(props);\r\n    this.state = {\r\n      playerCards: [],\r\n      dealerCards: [],\r\n      deck: [...(props.cards || [])],\r\n      playerScore: 0,\r\n      dealerScore: 0,\r\n      playerStay: false,\r\n      playerBust: false,\r\n      dealerBust: false,\r\n      winner: null,\r\n      gameOver: false,\r\n    };\r\n\r\n    //Setting up the button states\r\n    this.playerHit = this.hitPlayer.bind(this);\r\n    this.playerStand = this.playerStand.bind(this);\r\n    this.resetGame = this.resetGame.bind(this);\r\n    this.exitGame = this.exitGame.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.startGame();\r\n  }\r\n\r\n  resetGame() {\r\n    this.setState({\r\n      playerCards: [],\r\n      dealerCards: [],\r\n      deck: [...this.props.cards],\r\n      playerScore: 0,\r\n      dealerScore: 0,\r\n      playerStay: false,\r\n      playerBust: false,\r\n      dealerBust: false,\r\n      winner: null,\r\n      gameOver: false,\r\n    });\r\n    this.startGame();\r\n  }\r\n\r\n  //Go exit to title screen\r\n  exitGame(){\r\n\r\n\r\n  }\r\n\r\n  //Start the game\r\n  startGame() {\r\n    const { deck } = this.state;\r\n    const dealOne = this.dealCard(deck);\r\n    const dealTwo = this.dealCard(dealOne.cards);\r\n    const dealThree = this.dealCard(dealTwo.cards);\r\n\r\n    this.setState({\r\n      playerCards: [dealOne.card, dealThree.card],\r\n      dealerCards: [dealTwo.card],\r\n      fullDeck: dealThree.cards,\r\n      playerScore: this.calculateScore([dealOne.card, dealThree.card]),\r\n      dealerScore: isNaN(dealTwo.card.value) ? 10 : dealTwo.card.value,\r\n    });\r\n  }\r\n\r\n  //When the player hits\r\n  hitPlayer() {\r\n    const { deck, playerBust } = this.state;\r\n    const deal = this.dealCard(deck);\r\n    const score = this.calculateScore([...this.state.playerCards, deal.card]);\r\n\r\n    //When the player does not busts(Player's score is within 21 points)\r\n    if (!playerBust) {\r\n      this.state({\r\n        playerCards: [...this.state.playerCards, deal.card],\r\n        fullDeck: deal.cards,\r\n        playerScore: this.calculateScore([\r\n          ...this.state.playerCards,\r\n          deal.card,\r\n        ]),\r\n      });\r\n    }\r\n\r\n    //Player busts when the player's score is over 21\r\n    if (score > 21) {\r\n      this.setState({\r\n        playerBust: true,\r\n        winner: \"Dealer\",\r\n        gameOver: true,\r\n      });\r\n    }\r\n  }\r\n\r\n  //When the player decides to stay\r\n  playerStand() {\r\n    const intervalId = setInterval(() => {\r\n      const { deck, playerScore, gameOver } = this.state;\r\n      const deal = this.dealCard(deck);\r\n      const score = this.calulcateScore([...this.state.dealerCards, deal.card]);\r\n\r\n      //If the round is not over yet\r\n      if (!gameOver) {\r\n        //Dealer draws the card until the dealer's score is at least 17\r\n        if (score < 17) {\r\n          this.setState({\r\n            dealerCards: [...this.state.dealerCards, deal.card],\r\n            fullDeck: deal.cards,\r\n            dealerScore: this.calculateScore([\r\n              ...this.state.dealerCards,\r\n              deal.card,\r\n            ]),\r\n          });\r\n        }\r\n        //When the dealer busts(dealer's score is over 21)\r\n        else if (score > 21) {\r\n          this.setState({\r\n            dealerBust: true,\r\n            winner: \"Player\",\r\n            gameOver: true,\r\n          });\r\n\r\n          clearInterval(intervalId);\r\n\r\n          //When the dealer's score is higher than the player's within the score of 21\r\n        } else if (score > playerScore) {\r\n          this.setState({\r\n            winner: \"Dealer\",\r\n            gameOver: true,\r\n          });\r\n            clearInterval(intervalId);\r\n\r\n          //When the dealer and the player's score is tie\r\n        } else if ((score = playerScore)) {\r\n          this.setState({\r\n            winner: \"Tie\",\r\n            gameOver: true,\r\n          });\r\n            clearInterval(intervalId);\r\n        }\r\n      }\r\n    }, 1000);\r\n  }\r\n\r\n  //Dealing or drawing the card\r\n  dealCard(cards) {\r\n    const randomNumber = Math.floor(Math.random() * cards.length);\r\n    const card = cards[randomNumber];\r\n    cards.splice(randomNumber, 1);\r\n\r\n    return {\r\n      card,\r\n      cards,\r\n    };\r\n  }\r\n\r\n  //To calculate the score of ace\r\n  calculateScore(cards) {\r\n    let score = cards.value\r\n      .map((card) => {\r\n        return card.value === \"ace\" ? 11 : isNaN(card.value) ? 10 : card.value;\r\n      })\r\n      .reduce((a, b) => {\r\n        return parseInt(a, 10) + parseInt(b, 10);\r\n      });\r\n\r\n    const cardValues = cards.map((card) => {\r\n      return card.value;\r\n    });\r\n\r\n    if (score > 21 && cardValues.includes(\"ace\")) {\r\n      score -= 10;\r\n    }\r\n\r\n    return score;\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      playerCards,\r\n      dealerCards,\r\n      playerScore,\r\n      dealerScore,\r\n      playerBust,\r\n      dealerBust,\r\n      winner,\r\n    } = this.state;\r\n\r\n    return (\r\n      <div className=\"game-container\">\r\n        <div className=\"dealer-cards-container\">\r\n          <div className=\"score-container\">\r\n            <Text type={\"score-text\"}>{dealerBust ? \"Bust\" : dealerScore}</Text>\r\n          </div>\r\n          {dealerCards.map((card, index) => {\r\n            return (\r\n              <div className=\"dealer-cards\" key={index}>\r\n                <Card suit={card.suit} value={card.value} />\r\n              </div>\r\n            );\r\n          })}\r\n\r\n          {winner === \"Dealer\" && <div className=\"winner\">WIN</div>}\r\n        </div>\r\n        <div className=\"player-cards-container\">\r\n          <div className=\"score-container\">\r\n            <Text type={\"score-text\"}>{playerBust ? \"Bust\" : playerScore}</Text>\r\n          </div>\r\n\r\n          {playerCards.map((card, index) => {\r\n            return (\r\n              <div className=\"player-cards\" key={index}>\r\n                <Card suit={card.suit} value={card.value} />\r\n              </div>\r\n            );\r\n          })}\r\n\r\n          {winner === \"Player\" && <div className=\"winner\">WIN</div>}\r\n        </div>\r\n        //The button for this game\r\n        <div className=\"button-container\">\r\n          <Button type={\"btn hit-btn\"} clickHandler={this.playerHit}>\r\n            HIT\r\n          </Button>\r\n          <Button\r\n            type={\"btn stand-btn\"}\r\n            clickHandler={this.playerStand}\r\n            color={\"tertiary\"}\r\n          >\r\n            STAND\r\n          </Button>\r\n          <Button type={\"btn reset-btn\"} clickHandler={this.resetGame}>\r\n            RESET\r\n          </Button>\r\n          <Button type={\"btn exit-btn\"} clickHandler={this.exitGame}>\r\n            EXIT\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Game;\r\n"]},"metadata":{},"sourceType":"module"}
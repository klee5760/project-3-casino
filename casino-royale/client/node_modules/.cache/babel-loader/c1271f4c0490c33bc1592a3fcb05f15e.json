{"ast":null,"code":"import _readOnlyError from \"C:\\\\Users\\\\klee5\\\\Desktop\\\\Project 3\\\\casino-royale\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/readOnlyError\";\nimport _toConsumableArray from \"C:\\\\Users\\\\klee5\\\\Desktop\\\\Project 3\\\\casino-royale\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"C:\\\\Users\\\\klee5\\\\Desktop\\\\Project 3\\\\casino-royale\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\klee5\\\\Desktop\\\\Project 3\\\\casino-royale\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\klee5\\\\Desktop\\\\Project 3\\\\casino-royale\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\klee5\\\\Desktop\\\\Project 3\\\\casino-royale\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\klee5\\\\Desktop\\\\Project 3\\\\casino-royale\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\klee5\\\\Desktop\\\\Project 3\\\\casino-royale\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"C:\\\\Users\\\\klee5\\\\Desktop\\\\Project 3\\\\casino-royale\\\\client\\\\src\\\\components\\\\blackjack\\\\game\\\\blackjackgame.js\";\nimport React, { Component } from 'react';\nimport Card from '../card';\nimport Text from '../app';\nimport Button from '../button';\nimport './gametest.css';\n\nvar Game =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Game, _Component);\n\n  function Game(props) {\n    var _this;\n\n    _classCallCheck(this, Game);\n\n    //Setting up the states\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Game).call(this, props));\n    _this.state = {\n      playerCards: [],\n      dealerCards: [],\n      deck: _toConsumableArray(props.cards),\n      playerScore: 0,\n      dealerScore: 0,\n      playerStay: false,\n      playerBust: false,\n      dealerBust: false,\n      winner: null,\n      gameOver: false\n    }; //Setting up the button states\n\n    _this.playerHit = _this.hitPlayer.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.playerStand = _this.playerStand.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.resetGame = _this.resetGame.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.exitGame = _this.exitGame.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(Game, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.startGame();\n    }\n  }, {\n    key: \"resetGame\",\n    value: function resetGame() {\n      this.setState({\n        playerCards: [],\n        dealerCards: [],\n        deck: _toConsumableArray(this.props.cards),\n        playerScore: 0,\n        dealerScore: 0,\n        playerStay: false,\n        playerBust: false,\n        dealerBust: false,\n        winner: null,\n        gameOver: false\n      });\n      this.startGame();\n    } //Start the game\n\n  }, {\n    key: \"startGame\",\n    value: function startGame() {\n      var deck = this.state.deck;\n      var dealOne = this.dealCard(deck);\n      var dealTwo = this.dealCard(dealOne.cards);\n      var dealThree = this.dealCard(dealTwo.cards);\n      this.setState({\n        playerCards: [dealOne.card, dealThree.card],\n        dealerCards: [dealTwo.card],\n        fullDeck: dealThree.cards,\n        playerScore: this.calculateScore([dealOne.card, dealThree.card]),\n        dealerScore: isNaN(dealTwo.card.value) ? 10 : dealTwo.card.value\n      });\n    } //When the player hits\n\n  }, {\n    key: \"hitPlayer\",\n    value: function hitPlayer() {\n      var _this$state = this.state,\n          deck = _this$state.deck,\n          playerBust = _this$state.playerBust;\n      var deal = this.dealCard(deck);\n      var score = this.calculateScore([].concat(_toConsumableArray(this.state.playerCards), [deal.card])); //When the player does not busts(Player's score is within 21 points)\n\n      if (!playerBust) {\n        this.state({\n          playerCards: [].concat(_toConsumableArray(this.state.playerCards), [deal.card]),\n          fullDeck: deal.cards,\n          playerScore: this.calculateScore([].concat(_toConsumableArray(this.state.playerCards), [deal.card]))\n        });\n      } //Player busts when the player's score is over 21\n\n\n      if (score > 21) {\n        this.setState({\n          playerBust: true,\n          winner: 'Dealer',\n          gameOver: true\n        });\n      }\n    } //When the player decides to stay\n\n  }, {\n    key: \"playerStand\",\n    value: function playerStand() {\n      var _this2 = this;\n\n      var intervalId = setInterval(function () {\n        var _this2$state = _this2.state,\n            deck = _this2$state.deck,\n            playerScore = _this2$state.playerScore,\n            gameOver = _this2$state.gameOver;\n\n        var deal = _this2.dealCard(deck);\n\n        var score = _this2.calulcateScore([].concat(_toConsumableArray(_this2.state.dealerCards), [deal.card])); //If the round is not over yet\n\n\n        if (!gameOver) {\n          //Dealer draws the card until the dealer's score is at least 17\n          if (score < 17) {\n            _this2.setState({\n              dealerCards: [].concat(_toConsumableArray(_this2.state.dealerCards), [deal.card]),\n              fullDeck: deal.cards,\n              dealerScore: _this2.calculateScore([].concat(_toConsumableArray(_this2.state.dealerCards), [deal.card])),\n              playerStay: true\n            });\n          }\n        } //When the dealer busts(dealer's score is over 21)\n\n\n        if (score > 21) {\n          _this2.setState({\n            dealerBust: true,\n            winner: 'Player',\n            gameOver: true\n          });\n\n          clearInterval(intervalID); //When the dealer's score is higher than the player's\n        } else if (score > playerScore) {\n          _this2.setState({\n            winner: 'Dealer',\n            gameOver: true\n          }), clearInterval(intervalId); //When the dealer and the player's score is tie\n        } else if (score = (_readOnlyError(\"score\"), playerScore)) {\n          _this2.state({\n            winner: 'Tie',\n            gameOver: true\n          }), clearInterval(intervalId);\n        }\n      }, 1000);\n    } //Dealing or drawing the card\n\n  }, {\n    key: \"dealCards\",\n    value: function dealCards(cards) {\n      var randomNumber = Math.floor(Math.random() * cards.length);\n      var card = cards[randomNumber];\n      cards.splice(randomNumber, 1);\n      return {\n        card: card,\n        cards: cards\n      };\n    } //To calculate the score of ace\n\n  }, {\n    key: \"calculateScore\",\n    value: function calculateScore(cards) {\n      var score = card.value.map(function (card) {\n        return card.value === 'ace' ? 11 : isNaN(card.value) ? 10 : card.value;\n      }).reduce(function (a, b) {\n        return parseInt(a, 10) + parseInt(b, 10);\n      });\n      var cardValues = cards.map(function (card) {\n        return card.value;\n      });\n\n      if (score > 21 && cardValues.includes('ace')) {\n        score -= 10;\n      }\n\n      return score;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state2 = this.state,\n          playerCards = _this$state2.playerCards,\n          dealerCards = _this$state2.dealerCards,\n          playerScore = _this$state2.playerScore,\n          dealerScore = _this$state2.dealerScore,\n          playerBust = _this$state2.playerBust,\n          dealerBust = _this$state2.dealerBust,\n          winner = _this$state2.winner;\n      return React.createElement(\"div\", {\n        className: \"game-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"dealer-cards-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"score-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203\n        },\n        __self: this\n      }, React.createElement(Text, {\n        type: 'score-text',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204\n        },\n        __self: this\n      }, dealerBust ? 'Bust' : dealerScore)), dealerCards.map(function (card, index) {\n        return React.createElement(\"div\", {\n          className: \"dealer-cards\",\n          key: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 208\n          },\n          __self: this\n        }, React.createElement(Card, {\n          suit: card.suit,\n          value: card.value,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 209\n          },\n          __self: this\n        }));\n      }), winner === 'Dealer' && React.createElement(\"div\", {\n        className: \"winner\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215\n        },\n        __self: this\n      }, \"WIN\")), React.createElement(\"div\", {\n        className: \"player-cards-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"score-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221\n        },\n        __self: this\n      }, React.createElement(Text, {\n        type: 'score-text',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222\n        },\n        __self: this\n      }, playerBust ? 'Bust' : playerScore)), playerCards.map(function (card, index) {\n        return React.createElement(\"div\", {\n          className: \"player-cards\",\n          key: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 228\n          },\n          __self: this\n        }, React.createElement(Card, {\n          suit: card.suit,\n          value: card.value,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 229\n          },\n          __self: this\n        }));\n      }), winner === 'Player' && React.createElement(\"div\", {\n        className: \"winner\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 235\n        },\n        __self: this\n      }, \"WIN\")), \"//The button for this game\", React.createElement(\"div\", {\n        className: \"button-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 241\n        },\n        __self: this\n      }, React.createElement(Button, {\n        type: 'btn hit-btn',\n        clickHandler: this.playerHit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 242\n        },\n        __self: this\n      }, \"HIT\"), React.createElement(Button, {\n        type: 'btn stand-btn',\n        clickHandler: this.playerStand,\n        color: 'tertiary',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 243\n        },\n        __self: this\n      }, \"STAND\"), React.createElement(Button, {\n        type: 'btn reset-btn',\n        clickHandler: this.resetGame,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 244\n        },\n        __self: this\n      }, \"RESET\"), React.createElement(Button, {\n        type: 'btn exit-btn',\n        clickHandler: this.exitGame,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245\n        },\n        __self: this\n      }, \"EXIT\")));\n    }\n  }]);\n\n  return Game;\n}(Component);\n\nexport default Game;","map":{"version":3,"sources":["C:\\Users\\klee5\\Desktop\\Project 3\\casino-royale\\client\\src\\components\\blackjack\\game\\blackjackgame.js"],"names":["React","Component","Card","Text","Button","Game","props","state","playerCards","dealerCards","deck","cards","playerScore","dealerScore","playerStay","playerBust","dealerBust","winner","gameOver","playerHit","hitPlayer","bind","playerStand","resetGame","exitGame","startGame","setState","dealOne","dealCard","dealTwo","dealThree","card","fullDeck","calculateScore","isNaN","value","deal","score","intervalId","setInterval","calulcateScore","clearInterval","intervalID","randomNumber","Math","floor","random","length","splice","map","reduce","a","b","parseInt","cardValues","includes","index","suit"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport Card from '../card';\r\nimport Text from '../app';\r\nimport Button from '../button';\r\nimport './gametest.css';\r\n\r\nclass Game extends Component {\r\n\r\nconstructor(props) {\r\n\r\n//Setting up the states\r\nsuper (props);\r\nthis.state = {\r\n    playerCards: [],\r\n    dealerCards: [],\r\n    deck: [...props.cards],\r\n    playerScore: 0,\r\n    dealerScore: 0,\r\n    playerStay:false,\r\n    playerBust:false,\r\n    dealerBust:false,\r\n    winner: null,\r\n    gameOver: false,\r\n\r\n    \r\n};\r\n\r\n//Setting up the button states\r\nthis.playerHit = this.hitPlayer.bind(this);\r\nthis.playerStand = this.playerStand.bind(this);\r\nthis.resetGame = this.resetGame.bind(this);\r\nthis.exitGame = this.exitGame.bind(this);\r\n}\r\n\r\ncomponentDidMount() {\r\n\r\n    this.startGame();\r\n}\r\n\r\n\r\nresetGame() {\r\n    this.setState({\r\n        playerCards: [],\r\n        dealerCards: [],\r\n        deck: [...this.props.cards],\r\n        playerScore:0,\r\n        dealerScore:0,\r\n        playerStay:false,\r\n        playerBust:false,\r\n        dealerBust: false,\r\n        winner: null,\r\n        gameOver:false,\r\n    });\r\n    this.startGame();\r\n}\r\n\r\n//Start the game\r\nstartGame() {\r\n    const {deck} = this.state;\r\n    const dealOne = this.dealCard(deck);\r\n    const dealTwo = this.dealCard(dealOne.cards);\r\n    const dealThree = this.dealCard(dealTwo.cards);\r\n\r\n    this.setState({\r\n        playerCards: [dealOne.card, dealThree.card],\r\n        dealerCards: [dealTwo.card],\r\n        fullDeck: dealThree.cards,\r\n        playerScore: this.calculateScore([dealOne.card, dealThree.card]),\r\n        dealerScore: isNaN(dealTwo.card.value) ? 10 : dealTwo.card.value\r\n});\r\n}\r\n\r\n\r\n//When the player hits\r\nhitPlayer(){\r\n    const { deck, playerBust } = this.state;\r\n    const deal = this.dealCard(deck);\r\n    const score = this.calculateScore([...this.state.playerCards, deal.card]);\r\n\r\n    //When the player does not busts(Player's score is within 21 points)\r\n    if(!playerBust) {\r\n        this.state({\r\n            playerCards: [...this.state.playerCards, deal.card],\r\n            fullDeck: deal.cards,\r\n            playerScore: this.calculateScore([...this.state.playerCards,deal.card])\r\n        });\r\n    }\r\n\r\n    //Player busts when the player's score is over 21\r\n    if(score > 21) {\r\n        this.setState({\r\n            playerBust: true,\r\n            winner: 'Dealer',\r\n            gameOver: true\r\n        })\r\n    }\r\n}\r\n\r\n//When the player decides to stay\r\nplayerStand() {\r\n\r\n    const intervalId = setInterval(() => {\r\n        const { deck, playerScore, gameOver } = this.state;\r\n        const deal = this.dealCard(deck);\r\n        const score = this.calulcateScore([...this.state.dealerCards, deal.card]);\r\n\r\n\r\n        //If the round is not over yet\r\n        if(!gameOver) {\r\n\r\n            //Dealer draws the card until the dealer's score is at least 17\r\n            if (score < 17) {\r\n            this.setState ({\r\n                dealerCards: [...this.state.dealerCards,deal.card],\r\n                fullDeck:deal.cards,\r\n                dealerScore:this.calculateScore([...this.state.dealerCards, deal.card]),\r\n                playerStay: true       \r\n        });\r\n        }\r\n        }\r\n\r\n    //When the dealer busts(dealer's score is over 21)\r\n        if (score>21) {\r\n            this.setState({\r\n                dealerBust: true,\r\n                winner: 'Player',\r\n                gameOver:true\r\n            });\r\n\r\n            clearInterval(intervalID);\r\n\r\n            //When the dealer's score is higher than the player's\r\n        } else if( score>playerScore ) {\r\n        this.setState({\r\n            winner: 'Dealer',\r\n            gameOver: true,\r\n        }),\r\n\r\n        clearInterval(intervalId);\r\n\r\n        //When the dealer and the player's score is tie\r\n    } else if(score=playerScore) {\r\n        this.state({\r\n            winner:'Tie',\r\n            gameOver:true,\r\n        }),\r\n\r\n        clearInterval(intervalId);\r\n    }\r\n\r\n\r\n}, 1000);\r\n}\r\n\r\n//Dealing or drawing the card\r\ndealCards(cards) {\r\n\r\n    const randomNumber = Math.floor(Math.random() * cards.length);\r\n    const card = cards[randomNumber];\r\n    cards.splice(randomNumber,1);\r\n\r\n    return {\r\n        card, cards\r\n    }\r\n}\r\n\r\n//To calculate the score of ace\r\ncalculateScore(cards) {\r\n    let score = card.value.map(card => {\r\n        return card.value === 'ace' ? 11:\r\n        isNaN(card.value) ? 10:\r\n        card.value;\r\n    }).reduce((a,b) => {\r\n        return parseInt(a,10) + parseInt(b,10);\r\n    });\r\n\r\n    const cardValues = cards.map(card => {\r\n        return card.value;\r\n    });\r\n\r\n    if(score >21 && cardValues.includes('ace')) {\r\n        score -=10;\r\n    }\r\n\r\n    return score;\r\n}\r\n\r\nrender () {\r\n    const {\r\n        playerCards,\r\n        dealerCards,\r\n        playerScore,\r\n        dealerScore,\r\n        playerBust,\r\n        dealerBust,\r\n        winner \r\n    } = this.state;\r\n\r\n    return(\r\n        <div className='game-container'>\r\n\r\n        <div className = 'dealer-cards-container'>\r\n            <div className = 'score-container'>\r\n                <Text type = {'score-text'}>{dealerBust ? 'Bust' : dealerScore}</Text>\r\n            </div>\r\n            {dealerCards.map((card,index) => {\r\n            return (\r\n                <div className = 'dealer-cards' key={index}>\r\n                    <Card suit={card.suit} value={card.value}/>\r\n                </div>\r\n            )\r\n            })}\r\n\r\n            {winner === 'Dealer' && (\r\n                <div className = 'winner'>WIN</div>\r\n            )}\r\n\r\n        </div>\r\n\r\n<div className = 'player-cards-container'>\r\n    <div className = 'score-container'>\r\n    <Text type = {'score-text'}>{playerBust ? 'Bust' : playerScore}</Text>\r\n    </div>\r\n\r\n\r\n{playerCards.map((card,index) => {\r\nreturn (\r\n    <div className = 'player-cards' key={index}>\r\n        <Card suit={card.suit} value={card.value} />\r\n    </div>\r\n)\r\n})}\r\n\r\n{winner === 'Player' && (\r\n    <div className = 'winner'>WIN</div>\r\n)}\r\n\r\n</div>\r\n\r\n//The button for this game\r\n<div className='button-container'>\r\n<Button type={'btn hit-btn'} clickHandler={this.playerHit}>HIT</Button>\r\n<Button type={'btn stand-btn'} clickHandler={this.playerStand} color={'tertiary'}>STAND</Button>\r\n<Button type={'btn reset-btn'}  clickHandler={this.resetGame}>RESET</Button>\r\n<Button type={'btn exit-btn'}  clickHandler={this.exitGame}>EXIT</Button>\r\n</div>\r\n\r\n</div>\r\n\r\n    );\r\n}\r\n\r\n}\r\n\r\nexport default Game;"]},"metadata":{},"sourceType":"module"}